@page "/tasks"
@using TMSBlazor.Data
@using TMSBlazor.Services
@inject TaskDataService taskDataService
@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<AuthorizeView>
<PageTitle>Tasks</PageTitle>
<span class="flex justify-between p-2">
    <h1 class="text-3xl font-semibold text-purple-900">Tasks</h1>
    <button class="focus:outline-none text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-3 py-1.5 mb-1 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900" @onclick="NavigateToAddNewTaskPage">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
    </button>
</span>

<style>
.task-table th, .task-table td {
  padding: 8px;
  text-align: left;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.task-table {
  overflow-x: auto;
}
.task-table th:nth-child(2), .task-table td:nth-child(2) {
  max-width: 200px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

</style>

@if (taskData == null)
{
        <p><em>Loading..............................</em></p>
}
else
{     
        <div class="relative overflow-x-auto p-8">
            <table class="w-full text-sm text-left rtl:text-right text-gray-500 task-table">
                <thead class="text-xs text-white bg-purple-900 border-3 border-purple-200">
                    <tr>
                        <th scope="col" class="px-6 py-3">
                            Title 
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Description
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Due Date
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Status
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Action
                        </th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var task in taskData)
                {
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                            @task.Title
                                </th>
                                <td class="px-6 py-4">
                            @task.Description
                                </td>
                                <td class="px-6 py-4">
                            @task.DueDate.ToString().Split(" ")[0]
                                </td>
                                <td class="px-6 py-4">
                            @task.Status
                                </td>
                                <td class="px-6 py-4">
                                    <button @onclick="() => editTask(task.Id)" class="focus:outline-none text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-3 py-1.5 mb-1 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                        </svg>
                                    </button>
                                    <button @onclick="() => deleteTask(task.Id)" class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-3 py-1.5 mb-1 ml-2 dark:bg-red-400 dark:hover:bg-red-500 dark:focus:ring-red-700">
                                         <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                          <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                }
                </tbody>
            </table>
        </div>
}

@code {
    List<TaskData> taskData = new List<TaskData>();

    protected override async Task OnInitializedAsync()
    {
        taskData = await taskDataService.GetAllTaskDatas();
    }

    private void NavigateToAddNewTaskPage()
    {
        NavigationManager.NavigateTo("AddNewTask");
    }

    protected void editTask(int taskId)
    {
        Console.WriteLine("Hits editTask" + taskId);
        NavigationManager.NavigateTo($"AddNewTask/{taskId}");
    }

    protected async Task deleteTask(int taskId)
    {
        await taskDataService.DeleteTaskDataDetail(taskId);
        taskData = await taskDataService.GetAllTaskDatas(); // Update the data
        StateHasChanged(); // Trigger re-rendering
        NavigationManager.NavigateTo("Tasks");
    }
}
</AuthorizeView>